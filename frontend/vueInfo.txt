1.package.json, package-lock.json, node_modules

package.json  파일은 프로젝트에 대한 정보를 담고있다.
프로젝트의 이름, 버전, private 여부, 배포 및 개발에서 사용할 모듈 정보, 실행 명령어, 지원할 브라우저에 대한 설정 등을 포함.
dependencies로 설정된 부분이 배포만에서 사용될 모듈이며, devDependencies로 설정된 부분이 개발에서도 사용되는 모듈.
여기서 사용되는 모듈들도 결국 오픈소스 모듈들인데, 해당 모듈들이 동작을 하기 위해선 또 다른 모듈들을 필요로 한다
즉, 모듈들이 동작하기 위해 필요로 하는 모듈들이 있는데 해당 정보가 package-lock.json 파일에 있다.
그리고 여기에 해당되는 모든 모듈들이 실제로 설치된 곳이 바로 node_modules 폴더이다
(package.json에 종속된 라이브러리들이 모여있는 디렉터리)

2.src
src 디렉터리는 어플리케이션 디렉터리라고도 불리며, 실제 대부분의 코딩이 이루어지는 곳이다

3.App.vue, main.js, index.html
vue 동작에서 가장 핵심이 되는 부분
main.js - npm run serve 명령어를 뷰를 실행시켰을 때, 가장 먼저 실행되는 JavaScript 파일
        - Vue 인스턴스를 생성하는 핵심 역할
        - vue 로 부터 createApp를 가져온다. 그리고 createApp 함수를 통해 App.vue 컴포넌트를 가지고 인스턴스를 만들어서 #app(id='app')에다가 해당 인스턴스를 mount
index.html  -  어플리케이션의 핵심이 되는 파일
            -  Vue.ja 는 싱글 페이지 어플리케이션(Single Page Application) -> index.html 을 하나만을 가지고 Vue Application 을 구동
App.vue - 하나의 컴포넌트 파일
        - App.vue 의 경우 내부에 여러 컴포넌트들을 불러와서 main.js로 한 번에 넘겨주는 통합 컴포넌트

정리하자면, npm run serve명령어로 뷰를 실행시키는 순간 main.js 파일이 실행되고, main.js 파일은 vue를 기반으로 createApp 함수를 실행한다
            그리고 이때 가장 먼저 가지고 오는 것이 통합 컴포넌트인 App.vue 이다

4. Component 파일
컴포넌트파일은 <template>, <script>, <style> 부분으로 나누어져 있는데
template 부분에서는 HTML 로 화면상에 표시할 요소들을 작성하고
script 부분에는 스크립트 코드를 작성할 수 있다(import 와 export 가 있다)
style 부분에서는 template의 HTML요소를 꾸며줄 css 구문들을 작성해줄 수 있는데, scoped 속성을 사용하면 특정 컴포넌트에서만 고유의 스타일을 선언할 수 잇따

.vue 확장자를 가진 컴포넌트 파일은 /Component 디렉터리에도 있으며, /views 디렉터리에도 있다
두 군데로 나눠지는 차이점은 /views 디렉터리의 경우 화면 전체에 해당하는 컴포넌트를 관리하는 부분이며,
화면 전체가 아니라 부분으로 구성되어 재사용할 수 있는 컴포넌트들은 /Component 디렉터리에서 관리하게 된다


5. router/index.js/views
App.vue의 <template> 부분을 보면 <ourter-view/> 라는 부분이 있는데
이 부분이 router/index.js 와 연결되어 동작하는 부분이다

라우팅이란, 웹 페이지 간의 이동 방법으로 SPA 에서 주로 사용되는데
SPA 란, 페이지를 이동할 때마다 서버에서 웹 페이지를 요청하여 새로 갱신하는 것이 아니라, 사용할 페이지들을 미리 받아놓고, 페이지 이동시에클라이언트 라우팅을 이용하여 화면을 갱신하는 방법

router/index.js 파일에는 Object 배열의 routes가 선언되어 있는데
각각의 router는 path, name, Component 값을 가지고 있는데 , name은 유니크값을 가져야하며, Component라는 키는 path로 접근했을 때 연결할 실제 컴포넌트 파일 이름을 나타낸다

6.assets
font,icons,images,css 등, 어플리케이션에서 사용되는 정적 파일이 모여있는 디렉터리
(/public 디렉터리와는 다르게 webpack의 처리를 받을 수 있다는 특징이 있다)
